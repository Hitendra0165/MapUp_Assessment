# -*- coding: utf-8 -*-
"""python_task_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14lH7MQx9v5ZyAb0Qy32MxCwkcZV9jeL2

# Question 1: Car Matrix Generation
"""

import pandas as pd
import numpy as np
df = pd.read_csv('/content/dataset_1.csv')

def generate_car_matrix(df: pd.DataFrame) -> pd.DataFrame:
    """
    Creates a DataFrame for id combinations.

    Args:
        df (pandas.DataFrame): DataFrame with 'id_1', 'id_2', and 'car' columns.

    Returns:
        pandas.DataFrame: Matrix generated with 'car' values,
                          where 'id_1' and 'id_2' are used as indices and columns respectively.
    """
    # Create a pivot table with 'id_1' as index, 'id_2' as columns, and 'car' as values
    matrix = df.pivot(index='id_1', columns='id_2', values='car')

    # Replace diagonal values with 0
    np.fill_diagonal(matrix.values, 0)

    return matrix

result = generate_car_matrix(df)
print(result)

"""#Question 2: Car Type Count Calculation

"""

import pandas as pd
import numpy as np

def get_type_count(df: pd.DataFrame) -> dict:
    """
    Categorizes 'car' values into types and returns a dictionary of counts.

    Args:
        df (pandas.DataFrame): DataFrame with 'car' column.

    Returns:
        dict: A dictionary with car types as keys and their counts as values.
    """
    # Define the conditions for car_type categories
    conditions = [
        (df['car'] <= 15),
        (df['car'] > 15) & (df['car'] <= 25),
        (df['car'] > 25)
    ]

    # Define the category names
    categories = ['low', 'medium', 'high']

    # Create the new 'car_type' column
    df['car_type'] = np.select(conditions, categories, default=np.nan)

    # Calculate the count of occurrences for each 'car_type' category
    type_count = df['car_type'].value_counts().to_dict()

    # Sort the dictionary alphabetically based on keys
    type_count = dict(sorted(type_count.items()))

    return type_count


result = get_type_count(df)
print(result)

"""#Question 3: Bus Count Index Retrieval"""

import pandas as pd

def get_bus_indexes(df: pd.DataFrame) -> list:
    """
    Returns the indexes where the 'bus' values are greater than twice the mean.

    Args:
        df (pandas.DataFrame): DataFrame with 'bus' column.

    Returns:
        list: List of indexes where 'bus' values exceed twice the mean.
    """
    # Calculate twice the mean of the 'bus' column
    threshold = 2 * df['bus'].mean()

    # Get the indexes where 'bus' values exceed the threshold
    indexes = df[df['bus'] > threshold].index.tolist()

    # Sort the indexes in ascending order
    indexes.sort()

    return indexes

result = get_bus_indexes(df)
print(result)

"""#Question 4: Route Filtering

"""

import pandas as pd

def filter_routes(df: pd.DataFrame) -> list:
    """
    Filters and returns routes with average 'truck' values greater than 7.

    Args:
        df (pandas.DataFrame): DataFrame with 'route' and 'truck' columns.

    Returns:
        list: List of route names with average 'truck' values greater than 7.
    """
    # Group by 'route' and calculate the mean of 'truck' values
    grouped = df.groupby('route')['truck'].mean()

    # Filter routes with average 'truck' values greater than 7
    filtered_routes = grouped[grouped > 7].index.tolist()

    # Sort the list of routes
    filtered_routes.sort()

    return filtered_routes

result = filter_routes(df)
print(result)

"""#Question 5: Matrix Value Modification

"""

import pandas as pd
import numpy as np

def multiply_matrix(matrix: pd.DataFrame) -> pd.DataFrame:
    """
    Multiplies matrix values with custom conditions.

    Args:
        matrix (pandas.DataFrame): DataFrame with numeric values.

    Returns:
        pandas.DataFrame: Modified matrix with values multiplied based on custom conditions.
    """
    # Apply the conditions to the DataFrame values
    matrix = matrix.applymap(lambda x: x * 0.75 if x > 20 else x * 1.25)

    # Round the DataFrame values to 1 decimal place
    matrix = matrix.round(1)

    return matrix

# Multiply the matrix values based on the conditions
result = multiply_matrix(car_matrix)

# Print or view the result
print(result)

"""# Question 6: Time Check

"""

df = pd.read_csv('/content/dataset_2.csv')

import pandas as pd

def time_check(df: pd.DataFrame) -> pd.Series:
    """
    Use shared dataset-2 to verify the completeness of the data by checking whether the timestamps for each unique (`id`, `id_2`) pair cover a full 24-hour and 7 days period

    Args:
        df (pandas.DataFrame)

    Returns:
        pd.Series: Return a boolean series indicating if each (id, id_2) pair has incorrect timestamps
    """
    # Convert startDay and endDay to datetime format
    df['startDay'] = pd.to_datetime(df['startDay'], errors='coerce')
    df['endDay'] = pd.to_datetime(df['endDay'], errors='coerce')

    # Convert startTime and endTime to timedelta format
    df['startTime'] = pd.to_timedelta(df['startTime'])
    df['endTime'] = pd.to_timedelta(df['endTime'])

    # Check if each (id, id_2) pair covers a full 24-hour period and spans all 7 days of the week
    result = df.groupby(['id', 'id_2']).apply(lambda x: (x['startDay'].min().dayofweek == 0) &
                                                         (x['endDay'].max().dayofweek == 6) &
                                                         (x['startTime'].min() == pd.Timedelta(0)) &
                                                         (x['endTime'].max() == pd.Timedelta(hours=23, minutes=59, seconds=59)))

    # Return a boolean series indicating if each (id, id_2) pair has incorrect timestamps
    return result

# Convert the result to a DataFrame
result_df = result.reset_index()
result_df.columns = ['id', 'id_2', 'Timestamps_OK']

# Display the result DataFrame
print(result_df)

# Call the time_check function
result = time_check(df)

# Print the result
print(result)

