# -*- coding: utf-8 -*-
"""python_task_2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cRT_rsmrg7-u3T4jyEJQDyd9MO156BpY

# Question 1: Distance Matrix Calculation
"""

import pandas as pd
import numpy as np

def calculate_distance_matrix(df: pd.DataFrame) -> pd.DataFrame:
    """
    Calculate a distance matrix based on the dataframe, df.

    Args:
        df (pandas.DataFrame): DataFrame with columns 'id_start', 'id_end', and 'distance'

    Returns:
        pandas.DataFrame: Distance matrix
    """
    # Create a pivot table with 'id_start' and 'id_end' as indices and 'distance' as values
    df_pivot = df.pivot(index='id_start', columns='id_end', values='distance')

    # Make the pivot table symmetric
    df_pivot = df_pivot.combine_first(df_pivot.T)

    # Fill diagonal with 0s
    np.fill_diagonal(df_pivot.values, 0)

    # Calculate cumulative distances
    for i in df_pivot.columns:
        for j in df_pivot.columns:
            if np.isnan(df_pivot.loc[i, j]):
                # Use .loc to ensure compatibility
                df_pivot.loc[i, j] = df_pivot.loc[i].dropna().add(df_pivot.loc[:, j].dropna(), fill_value=0).min()

    return df_pivot

df = pd.read_csv("/content/dataset_3.csv")

result = calculate_distance_matrix(df)
print(result)



"""# Question 2: Unroll Distance Matrix

"""

def unroll_distance_matrix(df: pd.DataFrame) -> pd.DataFrame:
    """
    Unroll a distance matrix into a DataFrame with 'id_start', 'id_end', and 'distance' columns.

    Args:
        df (pandas.DataFrame): Distance matrix

    Returns:
        pandas.DataFrame: DataFrame with 'id_start', 'id_end', and 'distance' columns
    """
    # Unroll the distance matrix
    df_unrolled = df.stack().reset_index()

    # Rename the columns
    df_unrolled.columns = ['id_start', 'id_end', 'distance']

    # Exclude the rows where 'id_start' is equal to 'id_end'
    df_unrolled = df_unrolled[df_unrolled['id_start'] != df_unrolled['id_end']]

    return df_unrolled

distance_matrix = calculate_distance_matrix(df)
unrolled_df = unroll_distance_matrix(distance_matrix)
print(unrolled_df)

"""# Question 3: Finding IDs within Percentage Threshold

"""

import pandas as pd

def find_ids_within_ten_percentage_threshold(df: pd.DataFrame, reference_id: int) -> pd.DataFrame:
    """
    Find all IDs whose average distance lies within 10% of the average distance of the reference ID.

    Args:
        df (pandas.DataFrame): Symmetric distance matrix with diagonal values set to 0
        reference_id (int): Reference ID

    Returns:
        pandas.DataFrame: DataFrame with IDs whose average distance is within the specified percentage threshold
                          of the reference ID's average distance.
    """
    # Calculate the average distance for each ID
    avg_distances = df.mean(axis=1)

    # Get the average distance for the reference ID
    reference_avg_distance = avg_distances.loc[reference_id]

    # Calculate the 10% threshold
    threshold = 0.1 * reference_avg_distance

    # Find all IDs whose average distance lies within the threshold of the reference ID's average distance
    ids_within_threshold = avg_distances[(avg_distances >= reference_avg_distance - threshold) &
                                         (avg_distances <= reference_avg_distance + threshold)]

    # Sort the IDs
    ids_within_threshold = ids_within_threshold.sort_values()

    return ids_within_threshold

# Define the reference ID
reference_id = 1001400  # Replace this with your actual reference ID

# Call the function
ids_within_threshold = find_ids_within_ten_percentage_threshold(distance_matrix, reference_id)

# Print the result
print(ids_within_threshold)

"""# Question 4: Calculate Toll Rate

"""

import pandas as pd

def calculate_toll_rate(df: pd.DataFrame) -> pd.DataFrame:
    """
    Calculate toll rates for different vehicle types based on the distance.

    Args:
        df (pandas.DataFrame): DataFrame with a column 'distance'

    Returns:
        pandas.DataFrame: DataFrame with added columns for each vehicle type with their respective toll rates
    """
    # Define the rate coefficients for each vehicle type
    rate_coefficients = {
        'moto': 0.8,
        'car': 1.2,
        'rv': 1.5,
        'bus': 2.2,
        'truck': 3.6
    }

    # Calculate the toll rates for each vehicle type
    for vehicle_type, rate_coefficient in rate_coefficients.items():
        df[vehicle_type] = df['distance'] * rate_coefficient

    return df

df_with_toll_rates = calculate_toll_rate(df)
print(df_with_toll_rates)

"""# Question 5: Calculate Time-Based Toll Rates

"""

def calculate_time_based_toll_rates(df: pd.DataFrame) -> pd.DataFrame:
    """
    Calculate time-based toll rates for different time intervals within a day.

    Args:
        df (pandas.DataFrame)

    Returns:
        pandas.DataFrame
    """
    # Define the time intervals and discount factors
    intervals = [
        ('weekday', time(0, 0), time(10, 0), 0.8),
        ('weekday', time(10, 0), time(18, 0), 1.2),
        ('weekday', time(18, 0), time(23, 59, 59), 0.8),
        ('weekend', time(0, 0), time(23, 59, 59), 0.7)
    ]

    # Define the days of the week
    days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']

    # Create a new DataFrame to store the results
    df_new = df.copy()

    # Iterate over the days of the week
    for day in days:
        # Determine whether the day is a weekday or weekend
        day_type = 'weekday' if day in days[:5] else 'weekend'

        # Iterate over the time intervals
        for interval in intervals:
            if day_type == interval[0]:
                # Apply the discount factor to the toll rates during the time interval
                mask = (df_new['start_day'] == day) & (df_new['start_time'].dt.time >= interval[1]) & (df_new['end_time'].dt.time <= interval[2])
                df_new.loc[mask, df.columns] *= interval[3]

    return df_new

df = pd.read_csv("/content/dataset_3.csv")
result = calculate_time_based_toll_rates(df)
print(result)

